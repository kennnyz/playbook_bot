package main

import (
	"context"
	"fmt"
	"log"
	"math"
	"os"
	"os/signal"
	"strconv"
	"strings"
	"time"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserState int

const (
	StateIdle UserState = iota
	StateAwaitingSavePair
	StateAwaitingDealPair
	StateAwaitingBuyPrice
	StateAwaitingSellPrice
)

// –ú–∞–ø–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
var usersStates = make(map[int64]UserState)

var users = make(map[int64]*User)

type User struct {
	Name        string
	UserPairs   map[string]struct{}
	UserDeals   []*Deal
	PendingDeal *Deal
}

type Deal struct {
	Pair          string
	BuyPrice      float64
	SellPrice     float64
	Profit        float64
	ProfitPercent float64
	Date          time.Time
}

func main() {
	ctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt)
	defer cancel()

	opts := []bot.Option{
		bot.WithDefaultHandler(defaultHandler),
		bot.WithCallbackQueryDataHandler("/add_pair", bot.MatchTypeExact, addPair_callbackHandler),
		bot.WithCallbackQueryDataHandler("/add_deal", bot.MatchTypeExact, addDeal_callbackHandler),
		bot.WithCallbackQueryDataHandler("/get_history", bot.MatchTypeExact, getHistory_callbackHandler),
		bot.WithMiddlewares(showMessageWithUserName),
	}

	b, err := bot.New("6791125665:AAHKZBXRdFjppkhzmPgmDp4oh2MoInIj3Go", opts...)
	if err != nil {
		panic(err)
	}

	b.RegisterHandler(bot.HandlerTypeMessageText, "/start", bot.MatchTypeExact, startCommand)

	b.Start(ctx)
}

func defaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	chatID := getChatID(update)
	currentState := usersStates[chatID]

	switch currentState {
	case StateAwaitingSavePair:
		log.Println("saved")
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à—É –ø–∞—Ä—É: " + update.Message.Text + " ‚úÖ",
		})
		users[getChatID(update)].UserPairs[update.Message.Text] = struct{}{}
		usersStates[update.Message.Chat.ID] = StateIdle
	case StateAwaitingDealPair:
		handlePairSelection(ctx, b, update)
	case StateAwaitingBuyPrice:
		handleBuyPrice(ctx, b, update)
	case StateAwaitingSellPrice:
		handleSellPrice(ctx, b, update)
	default:
		showStandardButtons(ctx, b, update)
	}
}

func addPair_callbackHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	usersStates[update.CallbackQuery.Message.Message.Chat.ID] = StateAwaitingSavePair
	log.Printf("update user {%v} state for %v  ", update.CallbackQuery.Message.Message.Chat.Username, StateAwaitingSavePair)

	b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		ShowAlert:       false,
	})

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.CallbackQuery.Message.Message.Chat.ID,
		Text:   "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞/–ø–∞—Ä—ã (–Ω–∞–ø—Ä. Amazon, BTC/USDT): ",
	})
}

func addDeal_callbackHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	userChatID := getChatID(update)
	if userChatID == 0 {
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, ok := users[userChatID]
	if !ok {
		log.Println("User not found")
		return
	}
	log.Println("adding deal to ", user.Name)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä—ã
	if len(user.UserPairs) == 0 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.CallbackQuery.Message.Message.Chat.ID,
			Text:   "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É'.",
		})
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var keyboard [][]models.InlineKeyboardButton
	for pair := range user.UserPairs {
		keyboard = append(keyboard, []models.InlineKeyboardButton{{Text: pair, CallbackData: pair}})
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      userChatID,
		Text:        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏:",
		ReplyMarkup: models.InlineKeyboardMarkup{InlineKeyboard: keyboard},
	})
	usersStates[userChatID] = StateAwaitingDealPair
}

func handlePairSelection(ctx context.Context, b *bot.Bot, update *models.Update) {
	userChatID := getChatID(update)
	if userChatID == 0 {
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, ok := users[userChatID]
	if !ok {
		log.Println("User not found")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–∞—Ä—É
	selectedPair := update.CallbackQuery.Data

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–¥–µ–ª–∫—É
	user.PendingDeal = &Deal{Pair: selectedPair}

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: userChatID,
		Text:   "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏:",
	})

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—è —Å–¥–µ–ª–∫–∏ (BuyPrice)
	usersStates[userChatID] = StateAwaitingBuyPrice
}

func handleBuyPrice(ctx context.Context, b *bot.Bot, update *models.Update) {
	userChatID := getChatID(update)
	if userChatID == 0 {
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, ok := users[userChatID]
	if !ok {
		log.Println("User not found")
		return
	}

	buyPrice, err := strconv.ParseFloat(update.Message.Text, 64)
	if err != nil {
		log.Println("Error parsing buy price:", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: userChatID,
			Text:   "–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
		})
		return
	}

	user.PendingDeal.BuyPrice = buyPrice

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: userChatID,
		Text:   "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏:",
	})
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
	usersStates[userChatID] = StateAwaitingSellPrice
}

func handleSellPrice(ctx context.Context, b *bot.Bot, update *models.Update) {
	userChatID := getChatID(update)
	if userChatID == 0 {
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, ok := users[userChatID]
	if !ok {
		log.Println("User not found")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏
	update.Message.Text = strings.Replace(update.Message.Text, ",", ".", -1)
	sellPrice, err := strconv.ParseFloat(update.Message.Text, 64)
	if err != nil {
		log.Println("Error parsing buy price:", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: userChatID,
			Text:   "–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
		})
		return
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–¥–µ–ª–∫–∏
	user.PendingDeal.SellPrice = sellPrice

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
	completeDeal(ctx, b, userChatID, user)
	showStandardButtons(ctx, b, update)
	usersStates[userChatID] = StateIdle
}

func completeDeal(ctx context.Context, b *bot.Bot, userChatID int64, user *User) {
	user.PendingDeal.Profit = user.PendingDeal.SellPrice - user.PendingDeal.BuyPrice
	user.PendingDeal.ProfitPercent = truncateFloat((user.PendingDeal.Profit/user.PendingDeal.BuyPrice)*100, 2)

	user.PendingDeal.Date = time.Now()

	user.UserDeals = append(user.UserDeals, user.PendingDeal)
	dealText := "<b> –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üéâ –í–∞—à–∞ —Å–¥–µ–ª–∫–∞:</b>\n" +
		"<b>–ü–æ–∫—É–ø–∫–∞:</b> " + strconv.FormatFloat(user.PendingDeal.BuyPrice, 'f', 2, 64) + "\n" +
		"<b>–ü—Ä–æ–¥–∞–∂–∞:</b> " + strconv.FormatFloat(user.PendingDeal.SellPrice, 'f', 2, 64) + "\n" +
		"<b>–ü—Ä–∏–±—ã–ª—å:</b> " + strconv.FormatFloat(user.PendingDeal.Profit, 'f', 2, 64) + "\n" +
		"<b>–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏:</b> " + strconv.FormatFloat(user.PendingDeal.ProfitPercent, 'f', 2, 64) + "%\n"
	fmt.Printf("%s deal: \nbuy price %v\nsell price %v \nprofit %v\nprofit percentage %v\n", user.Name, user.PendingDeal.BuyPrice, user.PendingDeal.SellPrice, user.PendingDeal.Profit, user.PendingDeal.ProfitPercent)
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    userChatID,
		Text:      dealText,
		ParseMode: "HTML",
	})
	user.PendingDeal = nil
}

func getHistory_callbackHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.CallbackQuery.Message.Message.Chat.ID,
		Text:   "–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è üôà",
	})
	showStandardButtons(ctx, b, update)
}

func showMessageWithUserName(next bot.HandlerFunc) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, update *models.Update) {
		if update.Message != nil {
			log.Printf("%s say: %s", update.Message.From.Username, update.Message.Text)
		}
		next(ctx, b, update)
	}
}

func startCommand(ctx context.Context, b *bot.Bot, update *models.Update) {
	message := "–ü—Ä–∏–≤–µ—Ç üëã\n–≠—Ç–æ –ë–æ—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –≤–µ—Å—Ç–∏ —É—á–µ—Ç –≤–∞—à–∏—Ö —Å–¥–µ–ª–æ–∫üìñ\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/add_deal - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É\n/get_history - –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫"
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   message,
	})
	if err != nil {
		log.Printf("can't send message to %s, error : %v", update.Message.Chat.Username, err)
	}

	if _, ok := users[update.Message.Chat.ID]; !ok {
		var deals []*Deal
		users[update.Message.Chat.ID] = &User{
			Name:      update.Message.Chat.Username,
			UserPairs: make(map[string]struct{}),
			UserDeals: deals,
		}

		log.Println("Saved new user: ", update.Message.Chat.Username)
	}

	showStandardButtons(ctx, b, update)
}

func showStandardButtons(ctx context.Context, b *bot.Bot, update *models.Update) error {
	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É", CallbackData: "/add_deal"},
				{Text: "–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É", CallbackData: "/add_pair"},
			},
			{
				{Text: "–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", CallbackData: "/get_history"},
			},
		},
	}

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      getChatID(update),
		Text:        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
		ReplyMarkup: kb,
	})
	if err != nil {
		log.Printf("can't send message to %s, error : %v", update.Message.Chat.Username, err)
		return err
	}

	return nil
}

func getChatID(update *models.Update) int64 {
	if update.Message != nil {
		return update.Message.Chat.ID
	} else if update.CallbackQuery != nil {
		return update.CallbackQuery.Message.Message.Chat.ID
	}

	return 0
}

func truncateFloat(f float64, precision int) float64 {
	multiplier := math.Pow(10, float64(precision))
	truncated := math.Trunc(f*multiplier) / multiplier
	return truncated
}
